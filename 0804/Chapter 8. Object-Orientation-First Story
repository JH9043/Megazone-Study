Chapter 8. Object-Orientation-First Story

객체 : 모델링의 대상

Object (학생)
Class 객체에 대한 변수와 메소드들이 모여있는 곳
(학생을 클래스에 설계)
Instance = 클래스를 메모리에 올리는 것
Object Orientation (객체 중심)

변수(Variable)

속성(Property, attribute, state) ==> 변수에 저장하여 설명

행위(behavior) ==> 메소드에 저장하여 설명

클래스란?
Classification(분류) -> Class (같은 성격과 같은 행동을 하는 공통 집단)
ex)파충류, 포유류, 조류

Abstraction => 추상화(모델링)

Encapsulation => 캡슐화(공개할 부분과 비공개할 부분 나눌 거임
비공개할 부분 들어올 거면 정확한 과정 통해서 들어오셈)
*민감한 부분을 외부의 조작으로부터 보호하는 원리
*클래스의 디테일한 부분을 숨기는 원리
private / public
모든 변수는 예외없이 private 이어야 한다.
변수가 private인 대신 메소드를 이용하여 변수에 접근한다

Inheritance => 상속
(부모님이 자식들에게 재산을 물려주는 것)
Polymorphism => 다형성

추상화, 캡슐화, 상속, 다형성 ==>자바답게 코딩함(객체 중심 코딩)



this  =>자기 클래스 주소(나 자신)
this. =>나의 멤버 변수
this()


ex)Date when = new Date();
Date = 설계도
new = 공간을 할당 받는다(건물 짓기 위한 땅 사기)
Date(); => 생성자(Constructor) (건물을 짓는다)
객체를 만들 때 자기 멤버 변수를 초기화 하는 역할
Private한 변수를 사용할 수 있다
set도 사용
생성자는 new를 쓸 때만 사용할 수 있다
생성자는 전형적으로 오버로딩을 사용할 수 있는 메소드이다
기본 생성자
public Car(){
}
생성자가 없을 때 컴파일러가 기본으로 만들어 주는 생성자(생략 돼있음)
괄호 안에 아무것도 없다
Protected => 자식만 생성자를 사용할 수 있다

