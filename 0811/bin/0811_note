0811_note

-0810 복습-
*classpath 중요
비트 연산자 시험 나옴
jar 파일 만들기


package ABC.financedept
javac -d <path>
패키지는 -d 옵션을 줘서 그 경로에 패키지를 만들어야 한다


import 하는 순서
java -cp .;C:\Temp Employee.java
 1) 현재 디렉토리 
 2)Reference library(외부 라이브러리)에서 찾고
 3)classpath에서 찾고
 4)Class Not Found
 
 ---------------------------------------------------

 -0811-
 Static 용법 4가지
 1. static variable(static 변수)
 - 참조 없이 클래스의 이름으로 접근하기 위한 공유 변수
 2. static method(static 메소드)
 - 참조 없이 클래스의 이름으로 메소드에 접근하기 위해서
 3. static initialization block(static 초기화 블록)
 - static 변수와 상수의 초기화
 4. static class(static 클래스)
 
 ex)
 	private String name; // member 변수
	private final double PI; // member 상수
	private static int age; // static 변수
	private static final boolean FLAG; // static 상수
	
	{ //Initialization block(초기화 블럭)
		this.name = "한지민"; //멤버 변수 초기화
		System.out.println("나는 생성자보다 먼저 호출되는데, 다시는 재호출할 수 없다.");
	}
	
	static { static Initialization block(static 초기화 블럭)
		age = 26; //static 변수 초기화
		FLAG = true; //static 상수 초기화
	}
	
--------------------------------------------------------

Final 용법 3가지
1. Final Variable(Final 변수)
- 자바의 상수
2. Final Method(Final 메소드)
- Override 금지
3. Final Class(Final 클래스)
- 상속의 금지

ex)
public class FinalDemo {
	private final double PI = Math.PI; //Member Constant(멤버 상수)
	private static final boolean FLAG = true; //Static Constant(Static 상수)
			
	public static void main(String[] args) {
		final String NAME = "한지민"; //Local Constant(로컬 상수)
		
	}

abstract와 final은 같이 사용할 수 없다 (서로 상극인 관계)
*abstract -> 부모의 자식이 재정의(@Override)를 필수로 하게 한다

클래스에 final을 붙여버리면 안에 있는 메소드 모두 final 메소드가 되어버린다
ex)
final class Parent{
	public void display() {System.out.println("나는 부모의 메소드");
	}
	
-----------------------------------------------------------
(AnonymousclassDemo1.java)
람다로 사용하려면
인터페이스 안에 해당 메소드에 멤버가 하나밖에 없다면
람다로 변환 가능(@FunctionalInterface)

---------------------------------------------------------
(ExceptionDemo.java)

*예외처리 (Exception)
- 개발자가 예상한 시나리오에서 벗어난 것을 처리하는 것 (유저가 잘못한 거임)
- 예외를 처리했다 -> Catch
- 프로그래밍으로 가능한 가벼운 에러 (mild 에러)

							     Exception
								    ㅣ
					            <-------->
				컴파일 Exception			RuntimeException
	    개발자가 컴파일 중 오류 난 경우       유저가 사용 중 오류 난 경우

 Checked Exception (개발자가 체크된 exception)
 Unchecked Exception (체크하지 않은 exception)
 
 try catch를 사용할 때
 catch(ArithmeticException e)에서 괄호 안에는 예외 타입에 맞는 예외를 적어야 됨
 catch를 여러 개 사용할 수 있다
 하지만 타입에 많은 예외를 전부 작성하기 어려우므로 부모형 하나만을 선언해도 된다
 
 ex) 자식 부모 선언
 try { 
	System.out.printf("%d / %d = %d\n", first, second, (first / second));
	} catch (NullPointerException e) { //자식
			System.out.println("내가 잡았음");
	} catch (ArrayIndexOutOfBoundsException e) { //자식
			System.out.println("내가 잡았음");
	} catch (NegativeArraySizeException e) { //자식
			System.out.println("내가 잡았음");
	}catch (RuntimeException e) { //부모
			System.out.println("내가 잡았음");
		}
		
ex)부모만 선언
 try {
	System.out.printf("%d / %d = %d\n", first, second, (first / second));
	}catch (RuntimeException e) { //부모
		System.out.println("내가 잡았음");
		
Multiple Catch Block
- 여러 개의 Exception Type를 열거하는 방법
- 주의할 점 : 위 아래 순서가 있다. 위쪽은 자식 Exception 아래쪽은 부모 Exception
- 부모를 먼저 선언하면 에러

-------------------------------------------------------------
(ExceptionDemo1.java)
Checked Exception 예외 처리 방법
1. try catch를 이용하여 처리 (권장)
- throws는 원하는 오류 메시지를 뜨게 할 수 없다
2. 오류가 발생한 메소드 선언 부에 throws를 이용하여 처리

-------------------------------------------------------------
(ExceptionDemo2.java)

API에서 예외 처리 방법 확인
1. static을 본다
2. throws 예외클래스를 본다
3. 예외클래스를 눌러서 RuntimeException이면 try catch를 안 써도 된다
(Unchecked 계열 : 유저가 말 안 들어서 발생한 오류이기 때문)

-------------------------------------------------------------
(ExceptionDemo3.java)

-------------------------------------------------------------
(KoreanException.java)

사용자 정의형 Exception
1. 누구의 자식인가? RuntimeException 계열인가? 아닌가? (Checked Unchecked 구분)
2. 생성자를 잘 만들자(메시지는 생성자를 통해서 전달)

KoreanException은 RuntimeException의 자식 ==> Unchecked Exception
-------------------------------------------------------------
(ExceptionDemo4.java)
사용자 정의형 Exception

-------------------------------------------------------------
(MathException.java)
Checked Exception는 반드시
1. try ~ catch 사용하거나
2. 메소드의 선언부에 throws 사용

try{}
catch{}
finally{}

---------------------------------------------------------
(ExceptionDemo5.java)
file로부터 읽는 거
FileReader

버퍼를 스트림으로 읽을 거

버퍼단위로 읽을 거
BufferedReader

1. close() 반드시 파일을 열거나 DB를 열었을 때 처리해야 한다.
2. 그러기 위해서 finally 블록에 close()를 사용한다
3. 하지만 finally 블록이 너무 코드가 길어지기 때문에 Autocloseable 인터페이스의 자식들은 finally 안에
   close()를 할 필요가 없기 때문에 finally block은 사용하지 않아도 된다
4. 이때 try block이 모두 끝나면 자동으로 해당 객체의 close()가 일어난다.


-------------------------------------------------------
(Mammal.java)
Method's Override 조건 3가지 ** (시험에 잘나옴)
1. 이름, 리턴 타입, 괄호가 같아야한다.
2. 메소드의 접근 제한자는 부모보다 같거나 더 넓어야한다.
3. 자식의 Exception은 부모의 Exception보다 같거나 더 적어야한다.

---------------------------------------------------------
(WrapperClassDemo.java)

Wrapper Class
JDK 1.4까지
ex)
	int age = 26; //stack에 있다
	Integer in = new Integer(age); // stack에 있는 값을 heap에 옮기는 것을 wrapping,boxing
	int su = in.intValue(); //heap에 옮기는 것을 stack에 옮기는 것을 unwrapping,unboxing
							//unwrapping 해도 값은 그대로
	System.out.println("su = " + su);

JDK 1.5이후 (autoboxing and autounboxing)
ex)
	Integer in = 26; //Integer in = new Integer(26 + 5); (자동으로 박스에 담아준다)
	int su = in + 100; //
	System.out.println("su = " + su);

------------------------------------------------------------
(UtilityClassDemo.java)

Java.util 패키지

Java에서 날짜 / 시간을 처리하는 6가지 방법
1. java.util.Date class
ex)
	Date now = new Date();
	System.out.println(now);
	
2. java.util.Calendar class
ex)
	Calendar today = Calendar.getInstance();
	int year = today.get(Calendar.YEAR);
	int month = today.get(Calendar.MONTH)+1;
	int day = today.get(Calendar.DAY_OF_MONTH);
	System.out.println(year + "년 " + month + "월 " + day + "일입니다.");

3. java.text.DateFormat class
ex)
	DateFormat df = DateFormat.getDateTimeInstance(DateFormat.FULL,DateFormat.FULL,Locale.FRANCE);
	System.out.println(df.format(new Date()));
	
4. SimpleDateFormat
- 원하는 포맷으로 출력할 수 있다
ex)
	String pattern = "오늘은 YYYY년 MM월 dd일입니다.";
	SimpleDateFormat sdf = new SimpleDateFormat(pattern);
	System.out.println(sdf.format(new Date()));
	
5. printf()
ex)
	System.out.printf("오늘은 %1$tY년 %1$tm월 %1$td일입니다.\n",new Date());
	
---------------------------------------------------------------------------

(RandomDemo.java)

----------------------------------------------------------------------------

 Generics
모든 걸 담을 수 있는 통이지만 라벨을 붙이자 ( <>안에 라벨 적기)
ex)
	class Car<T>{ // <T>를 적음으로써 모든 것을 받은 수 있는 Car가 됨
컬렉션 프레임워크에서만 쓴다

----------------------------------------------------------------------------
 Collection 
 Set
 - 중복된 데이터가 나오면 한번만 넣는다
 HashSet
 - 중복된 데이터만 제거
 TreeSet
 - 중복된 데이터 제거 후 오름차순 정렬
 
----------------------------------------------------------------------------
 (ListDemo.java)
 
 1. Stack
 -LIFO(Last Input First Out)
 가장 마지막에 들어간 애가 먼저 나온다
 push -> 스택에 넣기
 pop -> 스택에서 빼고 출력 (pop할 때 포인터가 움직인다)
 peek -> 스택에서 빼지않고 출력 (포인터 가만히 있는다)
 search -> 위에서부터 1로 시작해서 찾는다 못찾으면 -1
 
 2. Vector
 기본 벡터는 방을 10개 만든다
 Vector(초기 용량, 용량 초과 시 추가할 방 개수)
 ex)
 - Vector(5, 3)
  벡터는 방을 5개 만든다
  6을 넣으면 방이 3개씩 늘린다
 - Vector(1, 1) -> 인원 수를 알 수 없을 때 사용하면 좋음
 
 3. ArrayList
 ArrayList(초기 용량)
 


  

 